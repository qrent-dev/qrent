name: Deploy

on:
  push:
    branches: [ v2.0 ]
  workflow_dispatch: # 允许手动触发

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: test
    needs: []

    steps:
    - uses: actions/checkout@v4

    - name: Create env file
      run: |
        cp .env.example .env || touch .env
        cat << EOF >> .env
        EOF

    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        source: ".,!node_modules"
        target: "/qrent/"

    - name: Deploy application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        script: |
          cd /qrent/

          export JWT_SECRET='${{ secrets.JWT_SECRET }}'
          export API_KEY='${{ secrets.API_KEY }}'
          export NSW_TRANSPORT_API_KEY='${{ secrets.NSW_TRANSPORT_API_KEY }}'
          export PROPERTY_RATING_API_KEY='${{ secrets.PROPERTY_RATING_API_KEY }}'
          export MYSQL_ROOT_PASSWORD='${{ secrets.MYSQL_ROOT_PASSWORD }}'
          export MYSQL_PROPERTY_USER_PASSWORD='${{ secrets.MYSQL_PROPERTY_USER_PASSWORD }}'
          export DATABASE_URL='mysql://root:${{ secrets.MYSQL_ROOT_PASSWORD }}@db:3306/qrent'
          export EXPOSE_PORT='3201'
          export HOST='0.0.0.0'
          export PORT='3201'
          export MYSQL_DATABASE='qrent'
          export NODE_ENV='production'
          export DB_HOST='db'
          export DB_USER='root'
          export DB_PASSWORD='${{ secrets.MYSQL_ROOT_PASSWORD }}'
          export DB_DATABASE='qrent'
          export DB_PORT='3306'
          export NEXT_PUBLIC_BACKEND_URL='http://209.38.19.70:3201'

          docker compose down
          docker compose build
          docker compose up -d
          timeout 30 bash -c 'while ! docker compose ps | grep -q "healthy\|Up"; do sleep 2; done'
          
          # Check if the backend server is responding
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3201/health)
          if [ "$response" != "200" ]; then
            echo "Backend health check failed! Got status code: $response"
            exit 1
          else
            echo "Backend is up and running with status code 200"
          fi

          # Check if the frontend is responding
          frontend_response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
          if [ "$frontend_response" != "200" ]; then
            echo "Frontend health check failed! Got status code: $frontend_response"
          else
            echo "Frontend is up and